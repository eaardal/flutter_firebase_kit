import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_firebase_kit/config/config.dart';
import 'package:flutter_firebase_kit/infrastructure/bloc.dart';
import 'package:flutter_firebase_kit/services/firebase.dart';
import 'package:flutter_firebase_kit/theme/app_theme.dart';
import 'package:flutter_firebase_kit/theme/dark_blue_theme.dart';
import 'package:grumble/app/di.dart';
import 'package:grumble/app/routes.dart';
import 'package:grumble/l10n/localization.dart';
import 'package:provider/provider.dart';

class App {
  final Config _config;

  App({
    required Config config,
  }) : _config = config;

  Future<void> run() async {
    runZonedGuarded(() async {
      FlutterError.onError = _onFlutterError;
      var deps = await _init();
      runApp(_createApp(deps));
    }, _onDartError);
  }

  Future<DI> _init() async {
    WidgetsFlutterBinding.ensureInitialized();
    initTheme();
    await initFirebase();
    return initDeps();
  }

  void initTheme() {
    AppTheme.setTheme(DarkBlueTheme.theme());
  }

  Future<void> initFirebase() async {
    await FirebaseAdmin.init(
      useEmulator: _config.firebase.useEmulator,
      port: _config.firebase.emulatorPort,
    );
  }

  Future<DI> initDeps() async {
    var deps = DI();
    return deps;
  }

  Widget _createApp(DI deps) {
    return MultiProvider(
      providers: [
        Provider.value(value: BlocFactory(deps.blocCreators)),
        Provider.value(value: deps.logger),
      ],
      child: AppRoot(_config.appTitle),
    );
  }

  void _onDartError(Object error, StackTrace stackTrace) {
    if (_config.isDevelopment) {
      print(error);
      print(stackTrace);
    } else {
      // TODO: Production error reporting system
    }
  }

  void _onFlutterError(FlutterErrorDetails error) {
    if (_config.isDevelopment) {
      FlutterError.dumpErrorToConsole(error);
    } else {
      Zone.current.handleUncaughtError(error.exception, error.stack!);
      // TODO: Production error reporting system
    }
  }
}

class AppRoot extends StatelessWidget {
  final String _title;

  const AppRoot(this._title, {Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: _title,
      theme: AppTheme.current,
      routes: Routes.registry(),
      localizationsDelegates: Localization.localizationsDelegates,
      supportedLocales: Localization.supportedLocales,
    );
  }
}
